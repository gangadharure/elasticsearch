[[set-up-tsds]]
=== Set up a time series data stream (TSDS)
++++
<titleabbrev>Set up a TSDS</titleabbrev>
++++

To create a time series data stream (TSDS), follow these steps:

. Check the <<tsds-prereqs,prerequisites>>.
. <<tsds-ilm-policy>>.
. <<tsds-create-mappings-component-template>>.
. <<tsds-create-index-settings-component-template>>.
. <<create-tsds-index-template>>.
. <<create-tsds>>.
. <<secure-tsds>>.

You also can follow these steps to convert an existing, regular data stream into
a TSDS. In this case, you'll want to edit your existing component and index
templates of creating new ones.

TIP: If you use {fleet} or {agent}, skip this tutorial. {fleet} and {agent}
automatically set up TSDSs for your metrics data.

[discrete]
[[tsds-prereqs]]
==== Prerequisites

* Before you create a TSDS, you should be familiar with the <<data-streams,data
streams>> and <<tsds-concepts,TSDS concepts>>.

* To set up a TSDS, you must have the following permissions:

** <<privileges-list-cluster,Cluster privileges>>: `manage_index_templates` or
`manage`
** <<privileges-list-indices,Index privilege>>: `create_doc` and `create_index`

[discrete]
[[tsds-ilm-policy]]
==== Create or edit a index lifecycle policy

We recommend using {ilm-init} to automate the management of your TSDS’s backing
indices. {ilm-init} requires an index lifecycle policy.

When creating a policy for a TSDS, we recommend specifying a `max_age` criteria
for the `rollover` action. This ensures the
<<time-bound-backing-indices,accepted `@timestamp` ranges>> for your TSDS's
backing indices are consistent. For example, a `max_age` of `1d` ensures your
backing indices represent approximately one day's worth of data.

////
[source,console]
----
PUT /_snapshot/found-snapshots
{
 "type": "fs",
  "settings": {
    "location": "my_backup_location"
  }
}
----
// TESTSETUP
////

[source,console]
----
PUT _ilm/policy/my-weather-sensor-lifecycle-policy
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_age": "1d",
            "max_primary_shard_size": "50gb"
          }
        }
      },
      "warm": {
        "min_age": "30d",
        "actions": {
          "shrink": {
            "number_of_shards": 1
          },
          "forcemerge": {
            "max_num_segments": 1
          }
        }
      },
      "cold": {
        "min_age": "60d",
        "actions": {
          "searchable_snapshot": {
            "snapshot_repository": "found-snapshots"
          }
        }
      },
      "frozen": {
        "min_age": "90d",
        "actions": {
          "searchable_snapshot": {
            "snapshot_repository": "found-snapshots"
          }
        }
      },
      "delete": {
        "min_age": "735d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}
----

[discrete]
[[tsds-create-mappings-component-template]]
==== Create or edit the mappings component template

A TSDS requires a matching index template. In most cases, you compose this index
template using one or more component templates. You typically use separate
component templates for mappings and index settings. This lets you reuse the
component templates in multiple index templates.

In the mappings component template, include:

* One or more dimension fields with a `time_series_dimension` value of `true`.
* One or more metric fields with a `time_series_metric` value.
* A `date` or `date_nanos` mapping for the `@timestamp` field. Only a
date `format` of `strict_date_optional_time` or `strict_date_optional_time_nano`
are supported. If you don’t specify a mapping, Elasticsearch maps `@timestamp`
as a `date` field with default options.

[source,console]
----
PUT _component_template/my-weather-sensor-mappings
{
  "template": {
    "mappings": {
      "properties": {
        "sensor_id": {
          "type": "keyword",
          "time_series_dimension": true
        },
        "location": {
          "type": "keyword",
          "time_series_dimension": true
        },
        "temperature": {
          "type": "half_float",
          "time_series_metric": "gauge"
        },
        "humidity": {
          "type": "half_float",
          "time_series_metric": "gauge"
        },
        "@timestamp": {
          "type": "date",
          "format": "strict_date_optional_time"
        }
      }
    }
  },
  "_meta": {
    "description": "Mappings for weather sensor data"
  }
}
----
// TEST[continued]

[discrete]
[[tsds-create-index-settings-component-template]]
==== Creating an index settings component template

Next, create a separate component template for index settings. In the index
settings component template, include:

* Your lifecycle policy in the `index.lifecycle.name` index setting.
* The `index.look_ahead_time` index setting.

NOTE: Do not specify the `index.routing_path` in this component template. You
must configure `index.routing_path` directly in the index template. We'll do
this in a following step.

[source,console]
----
PUT _component_template/my-weather-sensor-settings
{
  "template": {
    "settings": {
      "index.lifecycle.name": "my-lifecycle-policy",
      "index.look_ahead_time": "30m",
      "index.codec": "best_compression"
    }
  },
  "_meta": {
    "description": "Index settings for weather sensor data"
  }
}
----
// TEST[continued]

[discrete]
[[create-tsds-index-template]]
==== Create an index template

Use your component templates to create an index template. Specify:

* One or more index patterns that match the data stream's name. We recommend
using our {fleet-guide}/data-streams.html#data-streams-naming-scheme[data stream
naming scheme].

* A `data_stream` object with a `index_mode` of `time_series`.

* The `index.routing_path` index setting. The setting value should only match
plain `keyword` dimension fields. You must define this setting directly in the
index template.

* The component templates that contain your mappings and other index settings.

* A priority higher than `200` to avoid collisions with built-in templates.
See <<avoid-index-pattern-collisions>>.

[source,console]
----
PUT _index_template/my-weather-sensor-index-template
{
  "index_patterns": ["metrics-weather_sensors-*"],
  "data_stream": {
    "index_mode": "time_series"
  },
  "template": {
    "settings": {
      "index.routing_path": [ "sensor_id", "location" ]
    }
  },
  "composed_of": [ "my-weather-sensor-mappings", "my-weather-sensor-settings" ],
  "priority": 500,
  "_meta": {
    "description": "Template for my weather sensor data"
  }
}
----
// TEST[continued]

////
[source,console]
----
DELETE _data_stream/*
DELETE _index_template/*
DELETE _component_template/my-*
DELETE _ilm/policy/my-weather-sensor-lifecycle-policy
----
// TEST[continued]
////

[discrete]
[[create-tsds]]
==== Create the TSDS

<<add-documents-to-a-data-stream,Indexing requests>> add documents to a TSDS.
Documents in a TSDS must include:

* A `@timestamp` field
* * One or more dimension fields. At least one dimension must match the
`index.routing_path` index setting.

To automatically create your data stream, submit an indexing request that
targets the stream's name. This name must match one of your index template's
index patterns.

[source,console]
----
PUT metrics-weather_sensors-dev/_bulk
{ "create":{ } }
{ "@timestamp": "2099-05-06T16:21:15.000Z", "sensor_id": "HAL-000001", "location": "plains", "temperature": 26.7,"humidity": 49.9 }
{ "create":{ } }
{ "@timestamp": "2099-05-06T16:25:42.000Z", "sensor_id": "SYKENET-000001", "location": "swamp", "temperature": 32.4, "humidity": 88.9 }

POST metrics-weather_sensors-dev/_doc
{
  "@timestamp": "2099-05-06T16:21:15.000Z",
  "sensor_id": "SYKENET-000001",
  "location": "swamp",
  "temperature": 32.4,
  "humidity": 88.9
}
----
// TEST[skip: The @timestamp value won't match an accepted range in the TSDS]

You can also manually create the stream using the
<<indices-create-data-stream,create data stream API>>. The stream's name must
still match one of your template's index patterns.

[source,console]
----
PUT _data_stream/metrics-weather_sensors-prod
----
// TEST[setup:tsds_template]
// TEST[teardown:tsds_cleanup]

.Convert an existing data stream into a TSDS
****
If you're converting an existing regular data stream into a TSDS, you'll need to
manually roll over your data stream. Any indices created during and after this
rollover will have an `index_mode` of `time_series` and use TSDS functionality.

[source,console]
----
POST metrics-weather_sensors-prod/_rollover
----
// TEST[setup:tsds_template]
// TEST[teardown:tsds_cleanup]
****

[discrete]
[[secure-tsds]]
==== Secure the TSDS

Use <<privileges-list-indices,index privileges>> to control access to a TSDS.
Granting privileges on a TSDS grants the same privileges on its backing indices.

For an example, refer to <<data-stream-privileges>>.

[discrete]
[[tsds-next-steps]]
==== Next steps

Like a regular data stream, you can manage a TSDS using the
<<data-stream-apis,data stream APIs>>.

For more information about using a TSDS, refer to:

* <<use-a-data-stream>>
* <<data-streams-change-mappings-and-settings>>
